% Prolog program for Best First Search (BFS) algorithm

% Facts defining the graph with nodes and edges
edge(a, b, 1).
edge(a, c, 3).
edge(b, d, 1).
edge(c, d, 1).
edge(b, e, 4).
edge(d, f, 2).
edge(e, f, 1).

% Heuristic values for nodes
heuristic(a, 6).
heuristic(b, 4).
heuristic(c, 5).
heuristic(d, 2).
heuristic(e, 3).
heuristic(f, 0). % Goal node with a heuristic value of 0

% Rule for Best First Search algorithm
best_first_search(Start, Goal, Path) :-
    best_first([[Start]], Goal, RevPath),
    reverse(RevPath, Path).

best_first([[Goal | RestPath] | _], Goal, [Goal | RestPath]).
best_first([CurrentPath | OtherPaths], Goal, FinalPath) :-
    CurrentPath = [CurrentNode | _],
    findall([NextNode | CurrentPath],
            (edge(CurrentNode, NextNode, _), \+ member(NextNode, CurrentPath)),
            NewPaths),
    append(OtherPaths, NewPaths, AllPaths),
    sort_paths(AllPaths, SortedPaths),
    best_first(SortedPaths, Goal, FinalPath).

% Sorting paths based on the heuristic value of the first node
sort_paths(Paths, SortedPaths) :-
    maplist(path_cost, Paths, CostsPaths),
    keysort(CostsPaths, SortedCostsPaths),
    pairs_values(SortedCostsPaths, SortedPaths).

path_cost([Node | _], Heuristic-[Node | _]) :-
    heuristic(Node, Heuristic).

% Example query:
% ?- best_first_search(a, f, Path). % Finds the path from node 'a' to 'f' using Best First Search
