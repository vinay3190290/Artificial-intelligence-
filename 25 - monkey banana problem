% Prolog program for the Monkey and Banana problem
% The goal is for the monkey to get the banana by moving, climbing, and grabbing.

% Initial state: monkey is at location A, banana is at location B, and the monkey is on the ground.
initial_state(state(at(monkey, A), on_ground, at(banana, B), has_not)).

% Move action: The monkey can move from one location to another.
move(state(at(monkey, X), on_ground, at(banana, B), has_not),
     move(X, Y),
     state(at(monkey, Y), on_ground, at(banana, B), has_not)).

% Climb action: The monkey climbs onto a chair to reach the banana.
move(state(at(monkey, X), on_ground, at(banana, X), has_not),
     climb,
     state(at(monkey, X), on_chair, at(banana, X), has_not)).

% Grab action: The monkey grabs the banana when it is on the chair and at the same location as the banana.
move(state(at(monkey, X), on_chair, at(banana, X), has_not),
     grab,
     state(at(monkey, X), on_chair, at(banana, X), has)).

% Goal state: The monkey has the banana.
go(State) :-
    initial_state(State),
    path(State, []).

path(state(_, _, _, has), _) :-
    write('The monkey has the banana!'), nl.
path(State, Visited) :-
    move(State, Action, NewState),
    \\+ member(NewState, Visited),
    write(Action), nl,
    path(NewState, [State | Visited]).
